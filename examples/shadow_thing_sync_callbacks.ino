#include "arduino_secrets.h"

#include "RTCZero.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "things_prova2"
  https://create-dev.arduino.cc/cloud/things/cfac3a86-8f3c-476f-b7e3-34d34c6f3dc6 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  bool Switch;
  float controller;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// The following include needs data from the Secret tab to define the arrays above
#include "thingProperties.h"

void setup() {
 /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 3     
 */
  setDebugMessageLevel(2);
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  pinMode(1, INPUT);
  pinMode(5, OUTPUT);

  attachInterrupt(1, inter, RISING);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection, "mqtts-sa.iot.oniudra.cc");
}

void loop() {
  ArduinoCloud.update(call);
  // Your code here 
}

void call(){
  Serial.println("callback eseguita!");
}

void inter() {
  Switch = !Switch;
  digitalWrite(LED_BUILTIN, Switch);
  Serial.println("button pressed!");
  return;
}

void onSwitchChange() {
  // Do something
  Serial.println("OnChange eseguita!");
  digitalWrite(LED_BUILTIN, Switch);
}

void onSwitchAutoSync(ArduinoCloudProperty<bool> property) {
  // apply the SYNC_AUTO policy
  Serial.println("Sync eseguita!");
  if( property.getLastCloudChangeTimestamp() > property.getLastLocalChangeTimestamp()){
    Switch = property.getCloudShadowValue();
    if( property.getLastCloudChangeTimestamp() > property.getLastCloudSyncTimestamp()){
      property.forceCallbackOnChange();
    } 
  } else {
    Switch = property.getLocalShadowValue();
  }
  Serial.print("Final value of the property is ");
  Serial.println(Switch);
}

void onForceCloudSync(ArduinoCloudProperty<bool> property) {
  // apply the SYNC_FORCE_CLOUD policy
  
  Switch = property.getCloudShadowValue();

  if( property.getLastCloudChangeTimestamp() > property.getLastCloudSyncTimestamp()){
    property.forceCallbackOnChange();
  } 
}

void onSwitchForceDeviceSync(ArduinoCloudProperty<bool> property) {
  // apply the SYNC_FORCE_DEVICE policy
  Serial.println("Sync eseguita!");
  Switch = property.getLocalShadowValue();

}


void onControllerChange() {
  // Do something
}

void onControllerSync(ArduinoCloudProperty<float> property) {
  // Do something
}
